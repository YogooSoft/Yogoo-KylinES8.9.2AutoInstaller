---
#===============================================================================================
#
#  悦高软件-- ansible ELK 部署 Playbook
#
#  版权所有（c）2020-2024 上海悦高软件股份有限公司,保留所有权利。
#-----------------------------------------------------------------------------------------------
#  建立日期：2019-09-10
#
#  版 本 号：V1.5.2           更新日期:2024-03-05
#
#
#===============================================================================================

- block:
      # global variables
      - name: project_name checks
        fail: msg="project_name must be specified and cannot be blank"
        run_once: true
        when: project_name is undefined or project_name == ''

      - name: variable checks - plugins
        fail: msg="variable plugins should be a list"
        run_once: true
        when: plugins is defined and ( plugins is not iterable or plugins is string )

      # variables may be overwrite
      - name: http_port and transport_port checks
        fail: msg="http_port and transport_port must be defined when deploy multiple instances on single host"
        when: (http_port is undefined or transport_port is undefined) and (groups['elasticsearch']|map('extract', hostvars)|selectattr('ansible_host', 'eq', ansible_host)|list)|length > 1

      - name: variable check - config
        fail: msg="variable config should be a mapping"
        when: config is defined and config is not mapping

      #- name: variable checks - roles
      #  fail: msg="variable roles should be a list"
      #  when: roles is defined and ( roles is not iterable or roles is string )
  any_errors_fatal: true

- name: Check service deploy status
  stat:
    path: "{{ supervisor_path_conf }}/{{ service_name }}.conf"
  register: result_deploy

- name: Check service running status
  when: result_deploy.stat.exists == true
  shell: " cd {{ supervisor_path_home }} && supervisorctl -c {{ supervisor_path_home }}/supervisord.conf  status {{ service_name }}"
  register: result_running

- name: Set service status
  set_fact:
    is_service_deployed: "{{ result_deploy.stat.exists == true }}"
    is_service_running: "{{ result_deploy.stat.exists == true and ( result_running.stdout.lower().find('running') != -1 or result_running.stdout.lower().find('starting') != -1 ) }}"

- name: Set inventory status
  set_fact:
    stopped_but_running_inventory: "{{ ansible_play_hosts_all|map('extract', hostvars)|selectattr('state', 'defined')|selectattr('state', 'eq', 'stopped')|selectattr('is_service_running', 'defined')|selectattr('is_service_running', 'eq', true)|map(attribute='inventory_hostname')|list }}"
    soft_stopped_but_running_inventory: "{{ ansible_play_hosts_all|map('extract', hostvars)|selectattr('state', 'defined')|selectattr('state', 'eq', 'soft-stopped')|selectattr('is_service_running', 'defined')|selectattr('is_service_running', 'eq', true)|map(attribute='inventory_hostname')|list }}"
    absent_but_running_inventory: "{{ ansible_play_hosts_all|map('extract', hostvars)|selectattr('state', 'defined')|selectattr('state', 'eq', 'soft-stopped')|selectattr('is_service_running', 'defined')|selectattr('is_service_running', 'eq', true)|map(attribute='inventory_hostname')|list }}"

- name: Init runtime variables
  set_fact:
    run_once_on_stopped_but_running: "{{ stopped_but_running_inventory|length > 0 and (stopped_but_running_inventory|first == inventory_hostname) }}"
    run_once_on_soft_stopped_but_running: "{{ soft_stopped_but_running_inventory|length > 0 and (soft_stopped_but_running_inventory|first == inventory_hostname) }}"
    run_once_on_absent_but_running: "{{ absent_but_running_inventory|length > 0 and (absent_but_running_inventory|first == inventory_hostname) }}"
    steps: >-
      {%- if state == 'present' -%}
      {{ ([
            "system",
            "install",
            "plugin",
            "configure",
            "service",
            "temp-user/create" if xpack|bool and xpack_security|bool else none,
            "service/state",
            "service/action" if action is defined else none,
          ] + (added_steps | default([])) +
          [
            "check",
            "temp-user/clear" if xpack|bool and xpack_security|bool else none,
          ]) | reject("none") | list
      }}
      {%- elif state in ['stopped', 'soft-stopped' ] -%}
      {{ ([
            "configure",
            "service",
            "temp-user/create" if xpack|bool and xpack_security|bool and is_service_running|bool else none,
            "service/state",
            "temp-user/clear" if xpack|bool and xpack_security|bool else none,
          ]) | reject("none") | list
      }}
      {%- elif state == 'absent' -%}
      {{ ([
            "service",
            "temp-user/create" if xpack|bool and xpack_security|bool and is_service_running|bool else none,
            "service/state",
          ]) | reject("none") | list
      }}
      {%- endif -%}
